{"version":3,"sources":["serviceWorker.js","components/currency-example.js","components/index.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","aud","require","euro","currencySeries","TimeSeries","name","columns","points","audPoints","widget","data","reverse","euroPoints","i","length","push","buildPoints","style","styler","key","color","width","CrossHairs","_this$props","this","props","x","y","pointerEvents","stroke","_","isNull","react_default","a","createElement","x1","y1","x2","y2","height","React","Component","CurrencySampler","state","tracker","timerange","range","handleTrackerChanged","_this","setState","handleTimeRangeChange","handleMouseMove","euroValue","audValue","_this2","f","format","index","bisect","trackerEvent","at","concat","get","className","lib_entry","timeRange","timeAxisStyle","ticks","opacity","stroke-dasharray","values","fill","font-size","showGrid","paddingRight","maxTime","end","minTime","begin","timeAxisAngledLabels","timeAxisHeight","onTrackerChanged","onBackgroundClick","selection","enablePanZoom","onTimeRangeChanged","onMouseMove","minDuration","id","label","min","max","hideAxisLine","type","axis","breakLine","series","interpolation","highlight","onHighlightChange","onSelectionChange","currency_example_CrossHairs","value","position","align","categories","clickme","shadowSize","Wrapper","components","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m4dAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+ICLAC,EAAMC,EAAQ,KACdC,EAAOD,EAAQ,KAYrB,IAAME,EAAiB,IAAIC,aAAW,CAClCC,KAAM,WACNC,QAAS,CAAC,OAAQ,MAAO,QACzBC,OAbJ,WAII,IAHA,IAAMC,EAAYR,EAAIS,OAAO,GAAGC,KAAKC,UAC/BC,EAAaV,EAAKO,OAAO,GAAGC,KAAKC,UACnCJ,EAAS,GACJM,EAAI,EAAGA,EAAIL,EAAUM,OAAQD,IAClCN,EAAOQ,KAAK,CAACP,EAAUK,GAAG,GAAIL,EAAUK,GAAG,GAAID,EAAWC,GAAG,KAEjE,OAAON,EAMCS,KAGNC,EAAQC,iBAAO,CACjB,CAAEC,IAAK,MAAOC,MAAO,YAAaC,MAAO,GACzC,CAAEF,IAAK,OAAQC,MAAO,UAAWC,MAAO,KAGtCC,mLACO,IAAAC,EACYC,KAAKC,MAAdC,EADHH,EACGG,EAAGC,EADNJ,EACMI,EACLV,EAAQ,CAAEW,cAAe,OAAQC,OAAQ,QAC/C,OAAKC,IAAEC,OAAOL,IAAOI,IAAEC,OAAOJ,GAQnBK,EAAAC,EAAAC,cAAA,UANHF,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMjB,MAAOA,EAAOkB,GAAI,EAAGC,GAAIT,EAAGU,GAAIb,KAAKC,MAAMJ,MAAOiB,GAAIX,IAC5DK,EAAAC,EAAAC,cAAA,QAAMjB,MAAOA,EAAOkB,GAAIT,EAAGU,GAAI,EAAGC,GAAIX,EAAGY,GAAId,KAAKC,MAAMc,iBARnDC,IAAMC,WC9BhBC,6MDgDXC,MAAQ,CACJC,QAAS,KACTC,UAAW1C,EAAe2C,QAC1BpB,EAAG,KACHC,EAAG,QAGPoB,qBAAuB,SAAAH,GACdA,EAGDI,EAAKC,SAAS,CAAEL,YAFhBI,EAAKC,SAAS,CAAEL,UAASlB,EAAG,KAAMC,EAAG,UAM7CuB,sBAAwB,SAAAL,GACpBG,EAAKC,SAAS,CAAEJ,iBAGpBM,gBAAkB,SAACzB,EAAGC,GAClBqB,EAAKC,SAAS,CAAEvB,IAAGC,+EAGd,IAIDyB,EAAWC,EAJVC,EAAA9B,KACC+B,EAAIC,iBAAO,SACXV,EAAQtB,KAAKmB,MAAME,UAGzB,GAAIrB,KAAKmB,MAAMC,QAAS,CACpB,IAAMa,EAAQtD,EAAeuD,OAAOlC,KAAKmB,MAAMC,SACzCe,EAAexD,EAAeyD,GAAGH,GACvCJ,EAAQ,GAAAQ,OAAMN,EAAEI,EAAaG,IAAI,SACjCV,EAAS,GAAAS,OAAMN,EAAEI,EAAaG,IAAI,UAGtC,OACI9B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACX/B,EAAAC,EAAAC,cAAC8B,EAAA,UAAD,KACIhC,EAAAC,EAAAC,cAAC8B,EAAA,eAAD,CACIC,UAAWnB,EACXoB,cAAe,CACXC,MAAO,CACHtC,OAAQ,OACRuC,QAAS,IACTC,mBAAoB,OAIxBC,OAAQ,CACJC,KAAM,OACNC,YAAa,KAGrBC,UAAU,EACVC,aAAc,IACdC,QAASxE,EAAe2C,QAAQ8B,MAChCC,QAAS1E,EAAe2C,QAAQgC,QAChCC,sBAAsB,EACtBC,eAAgB,GAChBC,iBAAkBzD,KAAKuB,qBACvBmC,kBAAmB,kBAAM5B,EAAKL,SAAS,CAAEkC,UAAW,QACpDC,eAAe,EACfC,mBAAoB7D,KAAK0B,sBACzBoC,YAAa,SAAC5D,EAAGC,GAAJ,OAAU2B,EAAKH,gBAAgBzB,EAAGC,IAC/C4D,YAAa,QAEbvD,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CAAUzB,OAAO,OACbP,EAAAC,EAAAC,cAAC8B,EAAA,MAAD,CACIwB,GAAG,IACHC,MAAM,YACNC,IAAK,GACLC,IAAK,IACL1E,MAAO,CACHkD,MAAO,CACHtC,OAAQ,OACRuC,QAAS,IACTC,mBAAoB,QAK5BI,UAAQ,EACRmB,cAAY,EACZvE,MAAM,KACNwE,KAAK,SACLrC,OAAO,UAEXxB,EAAAC,EAAAC,cAAC8B,EAAA,OAAD,KACIhC,EAAAC,EAAAC,cAAC8B,EAAA,UAAD,CACI8B,KAAK,IACLC,WAAW,EACXC,OAAQ7F,EACRG,QAAS,CAAC,MAAO,QACjBW,MAAOA,EACPgF,cAAc,aACdC,UAAW1E,KAAKmB,MAAMuD,UACtBC,kBAAmB,SAAAD,GAAS,OACxB5C,EAAKL,SAAS,CAAEiD,eAEpBf,UAAW3D,KAAKmB,MAAMwC,UACtBiB,kBAAmB,SAAAjB,GAAS,OACxB7B,EAAKL,SAAS,CAAEkC,iBAGxBnD,EAAAC,EAAAC,cAACmE,EAAD,CAAY3E,EAAGF,KAAKmB,MAAMjB,EAAGC,EAAGH,KAAKmB,MAAMhB,IAC3CK,EAAAC,EAAAC,cAAC8B,EAAA,SAAD,CACI8B,KAAK,IACLQ,MAAO,EACPb,MAAM,eACNc,SAAS,gBAQrCvE,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACX/B,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,aACX/B,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAC8B,EAAA,OAAD,CACI6B,KAAK,OACLW,MAAM,QACNvF,MAAOA,EACPiF,UAAW1E,KAAKmB,MAAMuD,UACtBC,kBAAmB,SAAAD,GAAS,OAAI5C,EAAKL,SAAS,CAAEiD,eAChDf,UAAW3D,KAAKmB,MAAMwC,UACtBiB,kBAAmB,SAAAjB,GAAS,OAAI7B,EAAKL,SAAS,CAAEkC,eAChDsB,WAAY,CACR,CAAEtF,IAAK,MAAOsE,MAAO,MAAOa,MAAOjD,GACnC,CAAElC,IAAK,OAAQsE,MAAO,OAAQa,MAAOlD,iBArI3CZ,IAAMC,WElD9BiE,EACF1E,EAAAC,EAAAC,cAAA,MAAI6B,UAAW,8BAA8B4C,WAAY,GAAzD,YAiBWC,mLAXP,OACI5E,EAAAC,EAAAC,cAAA,QAAM6B,UAAU,WACZ/B,EAAAC,EAAAC,cAAA,MAAI6B,UAAU,+BAAd,mBACC2C,EACD1E,EAAAC,EAAAC,cAAC2E,EAAD,cANMpE,aCFtBqE,IAASC,OACL/E,EAAAC,EAAAC,cAAC8E,EAAD,MACAC,SAASC,eAAe,SJwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3aca8e0e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport _ from \"underscore\";\n\nimport { format } from \"d3-format\";\n\n// Pond\nimport { TimeSeries } from \"pondjs\";\n\nimport { ChartContainer, ChartRow, Charts, YAxis, LineChart, Baseline, Legend, Resizable, styler } from \"react-timeseries-charts\";\n\n\n\n// Data\nconst aud = require(\"../assets/static/usd_vs_aud.json\");\nconst euro = require(\"../assets/static/usd_vs_euro.json\");\n\nfunction buildPoints() {\n    const audPoints = aud.widget[0].data.reverse();\n    const euroPoints = euro.widget[0].data.reverse();\n    let points = [];\n    for (let i = 0; i < audPoints.length; i++) {\n        points.push([audPoints[i][0], audPoints[i][1], euroPoints[i][1]]);\n    }\n    return points;\n}\n\nconst currencySeries = new TimeSeries({\n    name: \"Currency\",\n    columns: [\"time\", \"aud\", \"euro\"],\n    points: buildPoints()\n});\n\nconst style = styler([\n    { key: \"aud\", color: \"steelblue\", width: 2 },\n    { key: \"euro\", color: \"#F68B24\", width: 2 }\n]);\n\nclass CrossHairs extends React.Component {\n    render() {\n        const { x, y } = this.props;\n        const style = { pointerEvents: \"none\", stroke: \"#ccc\" };\n        if (!_.isNull(x) && !_.isNull(y)) {\n            return (\n                <g>\n                    <line style={style} x1={0} y1={y} x2={this.props.width} y2={y} />\n                    <line style={style} x1={x} y1={0} x2={x} y2={this.props.height} />\n                </g>\n            );\n        } else {\n            return <g />;\n        }\n    }\n}\n\nclass CurrencySampler extends React.Component {\n    state = {\n        tracker: null,\n        timerange: currencySeries.range(),\n        x: null,\n        y: null\n    };\n\n    handleTrackerChanged = tracker => {\n        if (!tracker) {\n            this.setState({ tracker, x: null, y: null });\n        } else {\n            this.setState({ tracker });\n        }\n    };\n\n    handleTimeRangeChange = timerange => {\n        this.setState({ timerange });\n    };\n\n    handleMouseMove = (x, y) => {\n        this.setState({ x, y });\n    };\n\n    render() {\n        const f = format(\"$,.2f\");\n        const range = this.state.timerange;\n\n        let euroValue, audValue;\n        if (this.state.tracker) {\n            const index = currencySeries.bisect(this.state.tracker);\n            const trackerEvent = currencySeries.at(index);\n            audValue = `${f(trackerEvent.get(\"aud\"))}`;\n            euroValue = `${f(trackerEvent.get(\"euro\"))}`;\n        }\n\n        return (\n            <div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <Resizable>\n                            <ChartContainer\n                                timeRange={range}\n                                timeAxisStyle={{\n                                    ticks: {\n                                        stroke: \"#AAA\",\n                                        opacity: 0.25,\n                                        \"stroke-dasharray\": \"1,1\"\n                                        // Note: this isn't in camel case because this is\n                                        // passed into d3's style\n                                    },\n                                    values: {\n                                        fill: \"#AAA\",\n                                        \"font-size\": 12\n                                    }\n                                }}\n                                showGrid={true}\n                                paddingRight={100}\n                                maxTime={currencySeries.range().end()}\n                                minTime={currencySeries.range().begin()}\n                                timeAxisAngledLabels={true}\n                                timeAxisHeight={65}\n                                onTrackerChanged={this.handleTrackerChanged}\n                                onBackgroundClick={() => this.setState({ selection: null })}\n                                enablePanZoom={true}\n                                onTimeRangeChanged={this.handleTimeRangeChange}\n                                onMouseMove={(x, y) => this.handleMouseMove(x, y)}\n                                minDuration={1000 * 60 * 60 * 24 * 30}\n                            >\n                                <ChartRow height=\"400\">\n                                    <YAxis\n                                        id=\"y\"\n                                        label=\"Price ($)\"\n                                        min={0.5}\n                                        max={1.5}\n                                        style={{\n                                            ticks: {\n                                                stroke: \"#AAA\",\n                                                opacity: 0.25,\n                                                \"stroke-dasharray\": \"1,1\"\n                                                // Note: this isn't in camel case because this is\n                                                // passed into d3's style\n                                            }\n                                        }}\n                                        showGrid\n                                        hideAxisLine\n                                        width=\"60\"\n                                        type=\"linear\"\n                                        format=\"$,.2f\"\n                                    />\n                                    <Charts>\n                                        <LineChart\n                                            axis=\"y\"\n                                            breakLine={false}\n                                            series={currencySeries}\n                                            columns={[\"aud\", \"euro\"]}\n                                            style={style}\n                                            interpolation=\"curveBasis\"\n                                            highlight={this.state.highlight}\n                                            onHighlightChange={highlight =>\n                                                this.setState({ highlight })\n                                            }\n                                            selection={this.state.selection}\n                                            onSelectionChange={selection =>\n                                                this.setState({ selection })\n                                            }\n                                        />\n                                        <CrossHairs x={this.state.x} y={this.state.y} />\n                                        <Baseline\n                                            axis=\"y\"\n                                            value={1.0}\n                                            label=\"USD Baseline\"\n                                            position=\"right\"\n                                        />\n                                    </Charts>\n                                </ChartRow>\n                            </ChartContainer>\n                        </Resizable>\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <span>\n                            <Legend\n                                type=\"line\"\n                                align=\"right\"\n                                style={style}\n                                highlight={this.state.highlight}\n                                onHighlightChange={highlight => this.setState({ highlight })}\n                                selection={this.state.selection}\n                                onSelectionChange={selection => this.setState({ selection })}\n                                categories={[\n                                    { key: \"aud\", label: \"AUD\", value: audValue },\n                                    { key: \"euro\", label: \"Euro\", value: euroValue }\n                                ]}\n                            />\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default CurrencySampler;","import CurrencySampler from './currency-example';\n\n// export {\n//     CurrencySampler\n// };\n// no default\n\nexport default CurrencySampler;\n","import React, { Component } from 'react';\n\nimport CurrencySampler from './components/index';\n\nconst clickme = (\n    <h3 className= \"text-primary text-uppercase\" shadowSize={2}>\n  Click Me\n</h3>\n);\nclass Wrapper extends Component {\n    render() {\n        return (\n            <main className=\"content\">\n                <h1 className=\"text-primary text-uppercase\">This is a title</h1>\n                {clickme}\n                <CurrencySampler/>\n            </main>\n        )\n    }\n}\n\n\nexport default Wrapper;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport Wrapper from './App';\n\nReactDOM.render(\n    <Wrapper />,\n    document.getElementById('root')\n  );\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}